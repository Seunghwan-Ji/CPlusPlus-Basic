#include <stdio.h>
#include <wchar.h> // 와이드 문자 스트링 길이 계산
#include <assert.h> // 예외처리 용도
#include <iostream> // Input Output Stream: C++의 표준 입출력 클래스가 정의되어 있는 헤더파일

// 변수
// 지역(스택)
// 전역, 정적, 외부(데이터)

// 메모리 영역
// 스택
// 데이터
// ROM
// 힙 영역(동적할당)

void Test(int a)
{
	printf("%d\n", a);
}

int main()
{
	float* pF = (float*)malloc(4);
	int* pI = (int*)pF;
	// 두 포인터 변수 모두 힙 영역의 4바이트 공간의 주소를 가리키고 있다.

	*pF = 2.4f; // 포인터 변수가 가리키는 주소로 접근해서 값을 실수로 변경.

	// 이 시점에서 포인터 변수 pF, pI 둘 다 역참조 해서 주소로 접근해 봤을 때, 실제 값이 부동소수점 방식의 비트로 기록된걸 확인할 수 있다.

	int i = *pI; // 변수 i 에는 부동소수점 방식으로 기록된 비트를 정수형으로 보기 때문에 매우 큰 값이 저장된다.

	// 동적 할당
	// 1. 런타임 중에 대응 가능(프로그램 실행 도중 메모리 할당)
	// 2. 프로그래머가 직접 관리해야함(힙 메모리 해제)

	// 스택, 데이터, ROM 영역의 메모리는 프로그램 종료 시 자동으로 해제된다.
	// 컴파일러는 프로그램이 실행될 때 어떻게 동작할지,
	// 일반적인 변수나 전역 변수들은 얼만큼의 메모리 공간을 써야 하는지를 파악할 수 있기 때문이다.
	// 그러나 힙 메모리는 프로그램 실행 도중에 조건에 따라 할당이 될수도 있고 안될 수도 있기 때문에 프로그래머가 직접 해제시켜 줘야한다.

	Test(10);

	int iInput = 0;
	scanf_s("%d\n", &iInput);

	int* pInt = nullptr; // 힙 메모리를 가리킬 주소, 초기 주소 null

	if (100 == iInput) // 프로그램 실행중, 힙 메모리 할당 조건
	{
		pInt = (int*)malloc(100);
	}

	if (nullptr != pInt) // 할당된 힙 메모리 주소가 있는지 확인하는 조건
	{
		free(pInt); // 주소가 가리키는 힙 메모리 영역을 해제 시켜주는 함수(힙 메모리 주소 외에 다른 메모리 주소를 넣어줘선 안된다.)
	}

	return 0;
}