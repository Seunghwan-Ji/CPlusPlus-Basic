#include <stdio.h>

int main()
{
	// 포인터 변수
	// 자료형 + 변수명
	// 주소를 저장

	int* pInt = nullptr; // nullptr = 0 (int*: 주소를 넣어주면 4바이트 정수 단위로 접근)
	char* pChar = nullptr;
	short* pShort = nullptr;

	// 포인터 변수는 근본적으로 주소를 저장하는 변수이기 때문에, 모든 포인터 변수 자체의 크기는 다 같다.
	// 각 포인터 변수에 붙은 자료형의 의미는, 저장된 메모리 주소에 실제로 접근했을 때 각 자료형으로 해석하는 것이다.

	// 포인터 변수의 크기
	// 32비트 운영체제 기반 프로그래밍: 4Byte
	// 64비트 운영체제 기반 프로그래밍: 8Byte

	// 포인터 변수의 크기는 8 바이트다.
	int iSize = sizeof(pInt);
	printf("%d\n", iSize);

	int i = 0;
	pInt = &i;
	pInt += 1;
	// pInt 는 int* 변수 이기 때문에, 가리키는 곳을 int 로 해석한다.
	// 포인터 변수는 주소를 담고 있기 때문에 주소 연산 개념이 적용된다.
	// 따라서 주소값을 1 증가하는 의미는 다음 int 위치로 접근하기 위해서 sizsof(int) 단위로 증가하게 된다.

	// 포인터와 배열
	// 배열의 특징
	// 1. 메모리가 연속적인 구조이다.
	// 2. 배열의 이름은 배열의 시작 주소이다.

	int iArr[10] = {};

	// int 단위로 접근
	*(iArr + 0) = 10; // iArr[0] = 10;
	// 배열의 시작 주소, 인덱스가 0부터 시작하게되는 이유이다.
	// 시작 주소에 접근해서 값 10을 넣는다.
	*(iArr + 1) = 10; // iArr[1] = 10;
	// 배열이 int 자료형이기 때문에 시작 주소로부터 4바이트 단위만큼 건너뛴 주소로 접근해서 값 10을 넣는다.

	return 0;
}