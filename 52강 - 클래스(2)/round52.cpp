#include <iostream>

struct tMy // C++ 구조체 선언 문법
{

};

class CMy
{
	// 접근 제한 지정자: 클래스 내 멤버 변수 및 멤버 함수에 대한 접근 권한을 제어하는 데 사용.
	// private, protected(상속), public

private: // 외부에서 멤버를 볼 수 없다.
	int   m_i;
	float m_f;

public: // 외부에서 멤버를 볼 수 있다.
	int m_j;

public:
	void SetInt(int i)
	{
		m_i = i;
		// 같은 표현
		// this->m_i = i; (이 함수를 호출한 객체의 멤버를 접근하여 수정)
		// C 스타일에서는 객체의 주소를 인자에 포인터 변수로 받았었는데,
		// C++ 에서는 어차피 객체를 통해서 함수가 호출되기에,
		// 기본적으로 객체의 주소를 함수 내부에 숨겨진 this 라는 지역변수에 받아 놓는다.
		// 따라서 그 객체의 주소가 this 이며, 붙이지 않아도 된다.
	}
public:
	// 생성자
	CMy() // 이 클래스의 객체가 생성될 때 호출되는 함수, 컴파일러가 자동으로 호출.
		// 이니셜라이저: 이 클래스의 객체가 만들어지면서 멤버들의 값을 초기화하는 작업.
		: m_i(100)
		, m_f(0.f)
	{

	}

	// 소멸자
	~CMy() // 이 클래스의 객체가 소멸될 때 호출되는 함수, 컴파일러가 자동으로 호출.
	{

	}
};

int main()
{
	// C++ 클래스 특징
	// 생성자, 소멸자
	// 객체 생성, 소멸 시 자동으로 호출.
	// 직접 만들지 않으면, 기본 생성자, 기본 소멸자가 만들어진다.

	// 멤버 함수, ex) SetInt()
	// 해당 클래스가 사용하는 전용 함수.
	// 호출 하려면 해당 클래스의 객체가 필요하다.
	// 멤버 함수를 객체를 통해서 호출하면, 해당 객체의 주소가 this 포인터로 전달된다.
	CMy c;
	c.m_j = 0;
	c.SetInt(10); // 호출 시 객체 c의 주소도 전달됨.

	CMy c2;
	c2.SetInt(100); // 호출 시 객체 c2의 주소도 전달됨.

	CMy c3;
	c3.SetInt(1000); // 호출 시 객체 c3의 주소도 전달됨.

	return 0;
}