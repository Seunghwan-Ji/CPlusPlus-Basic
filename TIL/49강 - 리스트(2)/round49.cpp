#include <iostream>
#include "LinkedList.h"

int main()
{
	// 연결형 리스트
	// 같은 힙 메모리 공간에서 데이터가 띄엄띄엄 띄어져 있다.
	// 데이터를 추가할 때마다 같은 힙 메모리 공간 내에서 다른 공간에 동적 할당해서 데이터를 저장한다.
	// 배열, 가변 배열과 다르게 연속적인 메모리 블록 형태가 아니다.
	// 각 공간에는 저장한 데이터와 다음 공간의 주소를 담고 있다.
	// 데이터를 저장하는 각 공간을 '노드'(마디)라고 부른다.
	// 각 노드는 데이터와 다음 노드의 주소를 담고 있으므로, 연결된 형태라고 볼 수 있다.
	// 따라서 첫번째 노드(헤드 노드)의 시작 주소를 알면 다음 노드부터 데이터를 연속적으로 저장할 수 있다.
	// 연결형 리스트는 가변 배열과 달리, 데이터를 저장할 때마다 공간을 새로 할당하기 때문에,
	// 데이터를 연속적으로 저장하는데 있어서 전체 사이즈의 한계가 없는 특징이 있다.

	tLinkedList list = {}; // 구조체 초기화.
	InitList(&list); // 연결형 리스트 초기화.

	// 정수 데이터 추가
	PushBack(&list, 100);
	PushBack(&list, 200);
	PushBack(&list, 300);
	// 디버깅을 통해 연결형 리스트 자료형 포인터 변수 list 의
	// 헤드 노드부터 나머지 노드까지 값이 담겨있는지 확인해보자.

	ReleaseList(&list); // 연결형 리스트 힙 메모리 해제(노드 삭제)

	return 0;
}

// 과제
// 연결형 리스트 PushFront 함수 구현해보기