// #: 전처리기 구문, 컴파일 과정에서 가장 먼저 수행된다.('매크로'라고 불린다.)
// 컴파일러가 코드를 컴파일하기 전에 매크로를 치환하는 역할을 하기 때문에 세미콜론(;)을 붙이게 된다면
// 전처리기 지시문이 아닌 일반 코드로 인식되어 문법 오류가 발생한다.
#define HUNGRY  1 // 아래 HUNGRY 라는 모든 코드를 1로 치환하는 역할
#define THIRSTY 2
#define TIRED   4

// 일반적으로 16진수로 표현한다.(0x 는 16진수를 나타내는 표기이다.)
// 16진수: 0, 1, ..., 9, A, B, ... F (10진수로 치면 0 ~ 15)
#define HUNGRY  0x001 // 1
#define THIRSTY 0x002 // 2
#define TIRED   0x004 // 4
#define FIRE	0x008 // 8

#define COLD	0x010 // 16 (15 다음으로 16은 16진수로 10이다.)
#define POISON	0x020 // 32
#define POISON1	0x040 // 64
#define POISON2	0x080 // 128

#define POISON3	0x100 // 256
#define POISON4	0x200 // 512
#define POISON5 0x400 // 1024
#define POISON6 0x800 // 2048
// 4개씩 끊으면 이전 16진수와 다음 16진수가 두배씩 차이나는 규칙이 있다.

// 전처리기 구문의 사용 목적
// 1. 가독성
// 2. 유지보수

int main()
{
	// 자료형 (크기 단위, byte) Data Type
	// 정수형: char(1), short(2), int(4), long(4), long long(8)
	// 실수형: float(4), double(8)

	// 연산자
	// 대입 연산자: =
	// 산술 연산자
	// +, -, *, /, %(모듈러스, 나머지, 피연산자가 모두 정수)
	// ++, -- (증감 연산자): 한 단계 증가 또는 감소(정수, 실수에서는 +1 증가, -1 감소로 볼 수 있다.)

	// 논리 연산자
	// !(역), &&(and), ||(or)
	// 참(true), 거짓(false)
	// 참  : 0 이 아닌 값, 주로 1
	// 거짓: 0
	// bool 자료형은 참과 거짓만 다루기 때문에 수치로 표현하면 0 과 1 로만 표현된다.

	// 비교 연산자
	// ==, !=, <, <=, >, >=
	// 참, 거짓

	// 구문
	// if, else
	// switch case

	// 비트 연산자
	// 쉬프트 <<, >>
	unsigned char byte = 1;

	// byte << 1 모든 비트를 왼쪽으로 한 칸씩 옮긴다. 2^1 = 2배가 커진다.(십진수로 치면 10배가 커지는 개념)
	byte = byte << 1;
	byte <<= 1; // 위와 같은 표현

	byte <<= 3; // 2^3 = 8배가 커진다. 2^n 배수
	byte >>= 3; // 2^n 으로 나눈 몫. 오른쪽으로 이동하면 비트가 잘리기 때문에 1/2배 개념이 아니다. 나머지가 잘림.
	// ex) 이진수 1011(십진수 11) >> 1
	//            0101(십진수 5)
	//            (11 / 2^1 = 5)

	// 비트 곱(&), 합(|), xor(^), 반전(~)
	// 비트 단위로 연산을 진행
	// &: 둘다 1인경우 1
	// ex) 1011 & 0101 = 0001

	// |: 둘중 하나라도 1 이면 1
	// ex) 1011 | 0101 = 1111

	// ^: 둘이 같으면 0, 다르면 1
	// ex) 1011 ^ 0101 = 1110

	// ~: 1은 0으로, 0은 1로 반전
	// ex) ~ 1011 = 0100

	unsigned int iStatus = 0;

	// 상태 추가
	iStatus |= HUNGRY; // iStatus 변수 비트에 HUNGRY 변수 비트를 합친다.
	iStatus |= THIRSTY;

	// 상태 확인
	if (iStatus & THIRSTY) // 곱 연산자를 통해서 상태 체크
	{
		// 목마름 상태에 해당하는 비트 자리가 1일 때 수행하고 싶은 문장.
	}

	// 특정 자리 비트 제거
	iStatus &= ~THIRSTY;

	return 0;

}